class Test(object):
    def compile(source):
        cmd = "{CXX} -c {source} -fplugin={sixgill}".format(source=os.path.join(indir, source),
                                                            CXX=cfg.cxx, sixgill=cfg.sixgill_plugin)
        print("Running %s" % cmd)
        subprocess.check_call(["sh", "-c", cmd])

    def load_db_entry(dbname, pattern):
        if not isinstance(pattern, basestring):
            output = subprocess.check_output([binpath("xdbkeys"), dbname + ".xdb"])
            entries = output.splitlines()
            matches = [f for f in entries if re.search(pattern, f)]
            if len(matches) == 0:
                raise Exception("entry not found")
            if len(matches) > 1:
                raise Exception("multiple entries found")
            pattern = matches[0]

        output = subprocess.check_output([binpath("xdbfind"), "-json", dbname + ".xdb", pattern])
        return json.loads(output)

    def run_analysis_script(phase, upto=None):
        file("defaults.py", "w").write('''\
analysis_scriptdir = '{scriptdir}'
sixgill_bin = '{bindir}'
'''.format(scriptdir=scriptdir, bindir=cfg.sixgill_bin))
        cmd = [ os.path.join(scriptdir, "analyze.py"), phase ]
        if upto:
            cmd += [ "--upto", upto ]
        cmd.append("--source=%s" % indir)
        cmd.append("--objdir=%s" % outdir)
        cmd.append("--js=%s" % cfg.js)
        print("Running " + " ".join(cmd))
        subprocess.check_call(cmd)

    def computeGCTypes():
        run_analysis_script("gcTypes", upto="gcTypes")

    def computeHazards():
        run_analysis_script("callgraph")

    def loadGCTypes():
        gctypes = {'GCThings': [], 'GCPointers': []}
        for line in file(os.path.join(outdir, "gcTypes.txt")):
            m = re.match(r'^(GC\w+): (.*)', line)
            if m:
                gctypes[m.group(1) + 's'].append(m.group(2))
        return gctypes

    def process_body(body):
        return Body(body)

    def process_bodies(bodies):
        return [ process_body(b) for b in bodies ]

    def equal(got, expected):
        if got != expected:
            print("Got '%s', expected '%s'" % (got, expected))
